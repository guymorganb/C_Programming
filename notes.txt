These tools analyze your source code without actually running it (hence "static"). They're great for finding bugs, security vulnerabilities, and code quality issues.

Cppcheck: A popular static analysis tool for C and C++ code. It can detect various types of errors, including memory leaks, buffer overflows, and incorrect logic.
Clang Static Analyzer: Part of the LLVM project, it's a source code analysis tool that finds bugs in C, C++, and Objective-C programs.
Splint (Secure Programming Lint): Specifically designed for detecting security vulnerabilities and coding mistakes in C programs.


These tools help in maintaining a consistent coding style, which is crucial for readability and maintainability of the code.

GNU Indent: Reformats C code to a particular coding style.
Astyle (Artistic Style): Another code formatter that can be customized to match various coding styles.
Linter: Tools like lint are older but established ways to analyze code for potential errors and stylistic issues.

Cppcheck
Installation
Install Cppcheck:
On Linux, use your package manager, e.g., sudo apt-get install cppcheck (for Ubuntu/Debian).
On macOS, use Homebrew: brew install cppcheck.
On Windows, you can download and install it from Cppcheck's GitHub releases.
Usage
Run Cppcheck:

Open a terminal or command prompt.
Navigate to your project directory.
Run Cppcheck on your source files: cppcheck <options> <source_file_or_directory>.
For example: cppcheck --enable=all . to check all files in the current directory with all checks enabled.
Review the Results: Cppcheck will output any issues it finds to the console. Review these and make necessary code adjustments.

Clang Static Analyzer
Installation
Ensure Clang is Installed:

clang is often pre-installed on macOS and Linux. You can check by running clang --version.
On Windows, you can install it through the LLVM downloads page.
Clang Static Analyzer is usually included with clang.

Usage
Run the Clang Static Analyzer:

Use scan-build, a tool that comes with Clang. It's a command-line wrapper around clang that automatically uses the static analyzer.
In the terminal, navigate to your project directory.
Prefix your build command with scan-build. For example, if you usually compile your project with make, use scan-build make.
Review the Results:

scan-build will output issues it finds.
It may also generate an HTML report you can view in a web browser.
Integration with IDEs
Many IDEs support integration with static analysis tools:
In Eclipse CDT, you can integrate Cppcheck with plugins like Cppcheclipse.
In Visual Studio, there are extensions for integrating Cppcheck.
For CLion, VSCode, and other JetBrains IDEs, plugins or extensions can be found for both Cppcheck and Clang Static Analyzer.
Continuous Integration
If you're using Continuous Integration (CI), you can integrate these tools into your CI pipeline. For instance, in a Jenkins pipeline, you can run these tools as part of your build script.
